{"version":3,"sources":["constants.js","datastructures/DirectedEdge.js","algorithms/operations.js","datastructures/Digraph.js","ui/GraphBuilder.js","ui/AppBar.js","datastructures/IndexMinPQ.js","algorithms/Dijkstra.js","datastructures/AStarIndexMinPQ.js","algorithms/AStar.js","algorithms/Factory.js","ui/Border.js","App.js","serviceWorker.js","index.js"],"names":["states","colors","styles","shortestPaths","options","heuristics","DirectedEdge","from","to","weight","this","eucledian","Math","sqrt","pow","row","column","mapSquareToIndex","square","mapIndexToSquare","index","board","floor","Digraph","v","e","adj","Array","i","push","edges","forEach","add","GraphBuilder","rows","columns","squareCanBeReached","state","squareOutOfRange","g","buildSquarqNeighbours","edge","addEdge","validSquare","AppBar","props","Fragment","Box","display","justifyContent","flexDirection","alignItems","my","algorithm","mx","FormControl","InputLabel","Select","value","heuristicName","onChange","setHeuristic","MenuItem","renderHeuristics","setAlgorithm","Typography","relaxedEdges","width","variant","Slider","aria-label","aria-labelledby","aria-valuetext","valueLabelDisplay","step","min","max","defaultValue","delay","onDelayChange","component","FormLabel","RadioGroup","name","option","setOption","FormControlLabel","control","Radio","label","Button","disabled","algoIsOn","color","onClick","clearBoard","startAlgorithm","_","onAlgoIsOn","IndexMinPQ","n","isEmpty","contains","qp","greater","a","b","keys","pq","maxN","length","key","Error","swim","indexOfMin","exch","sink","k","j","swap","Dijkstra","graph","start","end","setBoard","hasPathTo","distTo","Number","POSITIVE_INFINITY","edgeTo","setUp","delMin","relax","path","pathTo","alert","setAlgoIsOn","setVisited","insert","updatedistance","incrementRelaxEdges","Promise","resolve","change","AStarIndexMinPQ","heuristic","pqA","pqB","AStar","algorithms","class","args","fromIndex","toIndex","abs","Border","setState","target","isOn","handleSquareClick","setStart","setEnd","onSetWall","onSetUndiscovered","handleSquareHover","buttons","createAlgorithm","className","setAlgorithmsParams","algo","resetRelaxEdges","bindMethods","bind","initBoard","createArea","style","backgroundColor","onMouseOver","setTimeout","grid","createColumn","clearSquare","graphBuilder","build","invoke","position","s","validatePositionSet","newStart","newEnd","height","createRows","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2adfbed0.chunk.js","sourcesContent":["const states = {\r\n    UNDISCOVERED: 1,\r\n    DISCOVERED: 2,\r\n    START: 3,\r\n    END: 4,\r\n    PATH: 5,\r\n    WALL: 6\r\n}\r\n\r\nconst colors = {\r\n    [states.UNDISCOVERED] : 'rgb(230, 230, 230)',\r\n    [states.DISCOVERED] : '#8d6e63',\r\n    [states.START] : '#4caf50',\r\n    [states.END] : '#f44336',\r\n    [states.PATH] : '#26c6da',\r\n    [states.WALL] : '#455a64'\r\n}\r\n\r\nconst styles = {\r\n    [states.UNDISCOVERED] : 'undiscovered',\r\n    [states.DISCOVERED] : 'discovered',\r\n    [states.START] : 'start',\r\n    [states.END] : 'end',\r\n    [states.PATH] : 'path',\r\n    [states.WALL] : 'wall'\r\n}\r\n\r\nconst shortestPaths = {\r\n    DIJKSTRA: 1,\r\n    ASTAR: 2,\r\n    DFS: 3  // Will implement later\r\n}\r\n\r\n// Has to be strings in order to make the radigroup to work properly\r\nconst options = {\r\n    SET_START : '1',\r\n    SET_END : '2',\r\n    SET_WALL : '3',\r\n    SET_UNDISCOVERED : '4'\r\n}\r\n\r\nconst heuristics = {\r\n    EUCLIDEAN: 1,\r\n    MANHATTAN: 2\r\n}\r\n\r\n\r\nconst rows = 30;\r\nconst columns = 30;\r\n\r\nexport { states, rows, columns, colors, styles, shortestPaths, heuristics, options }\r\n","export default class DirectedEdge {\r\n\r\n    constructor(from, to, weight) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.weight = weight;\r\n    }\r\n\r\n}","import { columns, rows } from \"../constants\";\r\n\r\nexport const eucledian = (from, to) => \r\n    Math.sqrt( Math.pow((to.row - from.row), 2) + Math.pow((to.column - from.column), 2) );\r\n\r\nexport const manhatten = (from, to) =>\r\n    Math.abs(to.row - from.row) + Math.abs(to.column - from.column);\r\n\r\nexport const manhattenHeuristic = (fromIndex, toIndex, board) => \r\n    manhatten(\r\n        mapIndexToSquare(fromIndex, board), \r\n        mapIndexToSquare(toIndex, board)\r\n    );\r\n\r\nexport const eucledianHeuristic = (fromIndex, toIndex, board) => \r\n    eucledian(\r\n        mapIndexToSquare(fromIndex, board), \r\n        mapIndexToSquare(toIndex, board)\r\n    );\r\n\r\nexport const mapSquareToIndex = square => square.column * columns + square.row;\r\n\r\nexport const mapIndexToSquare = (index, board) => board[index % rows][Math.floor(index / columns)];\r\n\r\n\r\n","export default class Digraph {\r\n\r\n    constructor(v) {\r\n        this.v = v; // Number of vertices\r\n        this.e = 0; // Number of edges\r\n        this.adj = new Array(v);    // All the adjacent vertices to a given vertex\r\n        for(let i = 0; i < v; i++) this.adj[i] = [];\r\n    }\r\n\r\n    v = () => this.v;\r\n    e = () => this.e;\r\n\r\n    addEdge(to) {\r\n        this.adj[to.from].push(to);\r\n        this.e ++;\r\n    }\r\n\r\n    edges() {\r\n        const edges = [];\r\n        for(let i = 0; i < this.v; i++)\r\n            this.adj[i].forEach(e => edges.add(e));\r\n        \r\n        return edges;\r\n    }\r\n}","import DirectedEdge from '../datastructures/DirectedEdge';\r\nimport { eucledian, mapSquareToIndex } from \"../algorithms/operations\";\r\nimport Digraph from '../datastructures/Digraph';\r\nimport { states } from '../constants';\r\n\r\n\r\nexport default class GraphBuilder {\r\n\r\n    constructor(board, rows, columns) {\r\n        this.board = board;\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n    }\r\n\r\n    build() {\r\n        this.g = new Digraph(this.rows * this.columns);\r\n        const { board } = this;\r\n\r\n        board.forEach((row ,i) =>\r\n            board[i].forEach(square => this.buildSquarqNeighbours(square))\r\n        );\r\n        return this.g;\r\n    }\r\n\r\n    validSquare(row, column) {\r\n        if (this.squareOutOfRange(row, column) || !this.squareCanBeReached(row, column)) return false;\r\n        return true;\r\n    }\r\n\r\n    squareCanBeReached = (row, column) => this.board[row][column].state !== states.WALL;\r\n    \r\n\r\n    squareOutOfRange = (row, column) => row < 0 || row >= this.rows || column < 0 || column >= this.columns\r\n\r\n    addEdge(from, to) {\r\n\r\n        const weight = eucledian(from, to);\r\n        const edge = new DirectedEdge(mapSquareToIndex(from, this.columns), \r\n                                      mapSquareToIndex(to, this.columns), \r\n                                      weight);\r\n        this.g.addEdge(edge);\r\n    }\r\n\r\n    buildSquarqNeighbours(square) {\r\n        const { board } = this;\r\n\r\n        if (this.validSquare(square.row + 1, square.column))\r\n            this.addEdge(square, board[square.row + 1][square.column]);\r\n\r\n        if (this.validSquare(square.row - 1, square.column)) \r\n            this.addEdge(square, board[square.row - 1][square.column]);\r\n        \r\n        if (this.validSquare(square.row, square.column + 1))\r\n            this.addEdge(square, board[square.row][square.column + 1]);\r\n        \r\n        if (this.validSquare(square.row, square.column - 1))\r\n            this.addEdge(square, board[square.row][square.column - 1]);\r\n\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport { shortestPaths, heuristics, options } from '../constants';\r\nimport { MenuItem, Select, FormControl, InputLabel, Box, \r\n        Button, Typography, Slider, Radio, RadioGroup, FormLabel, \r\n        FormControlLabel } from \"@material-ui/core\";\r\n\r\nexport default function AppBar(props) {\r\n\r\n    function renderHeuristics() {\r\n        if (props.algorithm === shortestPaths.ASTAR) {\r\n            return <Box mx={4}>\r\n                        <FormControl>\r\n                            <InputLabel>Heuristic</InputLabel>\r\n                            <Select\r\n                                value={props.heuristicName}\r\n                                onChange={props.setHeuristic}\r\n                            >\r\n                                <MenuItem value={heuristics.EUCLIDEAN}>Euclidean Distance</MenuItem>\r\n                                <MenuItem value={heuristics.MANHATTAN}>Manhattan Distance</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n        }\r\n    }\r\n\r\n    return <React.Fragment>\r\n        \r\n        <Box\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            flexDirection=\"row\"\r\n            alignItems=\"center\"\r\n            my={4}\r\n        >\r\n            {renderHeuristics()}\r\n            <Box mx={4}>\r\n                <FormControl>\r\n                    <InputLabel>Algorithm</InputLabel>\r\n                    <Select\r\n                        value={props.algorithm}\r\n                        onChange={props.setAlgorithm}\r\n                    >\r\n                        <MenuItem value={shortestPaths.DIJKSTRA}>Dijkstra</MenuItem>\r\n                        <MenuItem value={shortestPaths.ASTAR}>A*</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n\r\n            <Box mx={2}>\r\n                <Typography>Relaxed edges: {props.relaxedEdges}</Typography>\r\n            </Box>\r\n            \r\n            <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                width=\"30%\"\r\n                mx={2}\r\n            >\r\n                <Typography variant=\"subtitle2\"> Delay </Typography>\r\n                <Slider\r\n                    aria-label=\"Speed in ms.\"\r\n                    aria-labelledby=\"discrete-slider\"\r\n                    aria-valuetext=\"ms\"\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={10}\r\n                    min={1}\r\n                    max={200}\r\n                    defaultValue={props.delay}\r\n                    onChange={(e, v) => props.onDelayChange(v)}\r\n            />\r\n            </Box>\r\n            <Typography>\r\n                {`${props.delay} ms.`}\r\n            </Typography>\r\n            <Box mx={2}>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Options</FormLabel>\r\n                        <RadioGroup row aria-label=\"position\" name=\"position\" value={props.option} onChange={props.setOption}>\r\n                        <FormControlLabel value={options.SET_START} control={<Radio />} label=\"Start\" />\r\n                        <FormControlLabel value={options.SET_END} control={<Radio />} label=\"End\" />\r\n                        <FormControlLabel value={options.SET_WALL} control={<Radio />} label=\"Wall\" />\r\n                        <FormControlLabel value={options.SET_UNDISCOVERED} control={<Radio />} label=\"Erase\" />\r\n                        </RadioGroup>\r\n                </FormControl>\r\n            </Box>\r\n            <Box mx={2}>\r\n                <Button disabled={props.algoIsOn} color=\"default\" variant=\"outlined\" onClick={props.clearBoard}>Clear</Button>\r\n            </Box>\r\n            <Box mx={2}>\r\n                <Button disabled={props.algoIsOn} color=\"primary\" variant=\"contained\" onClick={props.startAlgorithm}>Start</Button>\r\n            </Box>\r\n            <Box mx={2}>\r\n                <Button color=\"secondary\" variant=\"contained\" onClick={_ => props.onAlgoIsOn(false)}>Stop</Button>\r\n            </Box>\r\n        </Box>\r\n    </React.Fragment>\r\n}\r\n","export default class IndexMinPQ {\r\n\r\n    constructor(n) {\r\n        this.maxN = n;\r\n        this.n = 0; // Number of elements in the data structure\r\n\r\n        this.keys = new Array(n + 1);\r\n        this.pq = new Array(n + 1);\r\n        this.qp = new Array(n + 1);\r\n        for(let i = 0; i < this.qp.length; i++) this.qp[i] = -1;\r\n    }\r\n\r\n    isEmpty = () => this.n === 0;\r\n\r\n    contains = index => this.qp[index] !== -1;\r\n\r\n\r\n    insert(i, key) {\r\n        if (i < 0 || i >= this.maxN) throw Error(\"Illegal insert for i in priority queue.\");\r\n        if (this.contains(i)) throw Error(`Index ${i} is already in the priority queue.`);\r\n        this.n ++;\r\n        this.qp[i] = this.n;\r\n        this.pq[this.n]  = i;\r\n        this.keys[i] = key;\r\n        this.swim(this.n);\r\n    }\r\n\r\n    delMin() {\r\n        if (this.n === 0) throw Error(\"Priority queue underflox.\");\r\n        const indexOfMin = this.pq[1];\r\n        this.exch(1, this.n--);\r\n        this.sink(1);\r\n        if (indexOfMin !== this.pq[this.n + 1]) throw Error(\"Index of min is not equal to pq[n + 1]\");\r\n        this.qp[indexOfMin] = -1;\r\n        this.keys[indexOfMin] = null;\r\n        this.pq[this.n + 1] = -1;\r\n        return indexOfMin;\r\n    }\r\n\r\n    change(k, v) {\r\n        this.keys[k] = v;\r\n        this.swim(this.qp[k]);\r\n        this.sink(this.qp[k]);\r\n    }\r\n\r\n    swim(k) {\r\n        k = Math.floor(k);\r\n        while (k > 1 && this.greater(k / 2, k)) {\r\n            this.exch(k, k / 2);\r\n            k = Math.floor(k / 2);\r\n        }\r\n    }\r\n\r\n    sink(k) {\r\n        k = Math.floor(k);\r\n        while(2 * k <= this.n) {\r\n            let j = 2 * k;\r\n            if (j < this.n && this.greater(j, j + 1)) j++;\r\n            if (!this.greater(k, j)) break;\r\n            this.exch(k, j);\r\n            k = j;\r\n        }\r\n    }\r\n\r\n    greater = (a, b) => this.keys[this.pq[Math.floor(a)]] > this.keys[this.pq[Math.floor(b)]];\r\n\r\n    exch(i, j) {\r\n        i = Math.floor(i);\r\n        j = Math.floor(j);\r\n        const swap = this.pq[i];\r\n        this.pq[i] = this.pq[j];\r\n        this.pq[j] = swap;\r\n        this.qp[this.pq[i]] = i;\r\n        this.qp[this.pq[j]] = j;\r\n    }\r\n\r\n}","import IndexMinPQ from '../datastructures/IndexMinPQ';\r\nimport { states } from \"../constants\"\r\n\r\nexport default class Dijkstra {\r\n\r\n    constructor(graph, n, start, end) {\r\n        this.graph = graph;\r\n        this.pq = new IndexMinPQ(n);\r\n        this.distTo = new Array(n);\r\n        this.edgeTo = new Array(n);\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n\r\n    setBoard = board => this.board = board;\r\n\r\n    async invoke() {\r\n        this.setUp();\r\n        while(!this.pq.isEmpty()) {\r\n            if (!this.board.algoIsOn) return;\r\n            const min = this.pq.delMin();\r\n            if(min === this.end) break;\r\n            await this.relax(min);\r\n        }\r\n\r\n        const path = this.pathTo(this.end);\r\n        if (!path) {\r\n            alert(\"No path was found!\");\r\n            this.board.setAlgoIsOn(false);\r\n            return;\r\n        }\r\n        await this.board.setVisited(path[0].to, states.END);\r\n        for(let i = 0; i < path.length - 1; i++)\r\n            await this.board.setVisited(path[i].from, states.PATH);\r\n        this.board.setAlgoIsOn(false);\r\n    }\r\n\r\n    setUp() {\r\n        for(let v = 0; v < this.graph.v; v++)\r\n            this.distTo[v] = Number.POSITIVE_INFINITY;\r\n        this.distTo[this.start] = 0.0;\r\n        this.pq.insert(this.start, 0.0);\r\n    }\r\n\r\n    async relax(v) {        \r\n        const adj = this.graph.adj[v];\r\n            for (let i = 0; i < adj.length; i++) \r\n                await this.updatedistance(adj[i]);\r\n    }\r\n\r\n    async updatedistance(e) {\r\n        const pq = this.pq;\r\n        const distTo = this.distTo;\r\n        const to = e.to;\r\n\r\n        if(distTo[to] > distTo[e.from] + e.weight) {\r\n        distTo[to] = this.distTo[e.from] + e.weight;\r\n        this.edgeTo[to] = e;\r\n\r\n        this.board.incrementRelaxEdges();\r\n        await this.board.setVisited(to, states.DISCOVERED);\r\n        \r\n        \r\n        return new Promise(resolve => {\r\n            if (pq.contains(to)) pq.change(to, distTo[to]);\r\n            else                 pq.insert(to, distTo[to]);\r\n            resolve();\r\n        });  \r\n        }\r\n    }\r\n\r\n    pathTo(v) {\r\n        if (!this.hasPathTo(v)) return null;\r\n        const path = [];\r\n        let edge = this.edgeTo[v];\r\n        while(edge != null) {\r\n            path.push(edge);\r\n            edge = this.edgeTo[edge.from];\r\n        }\r\n        return path;\r\n    }\r\n\r\n    hasPathTo = v => this.distTo[v] < Number.POSITIVE_INFINITY;\r\n}\r\n","import IndexMinPQ from \"./IndexMinPQ\";\r\n\r\nexport default class AStarIndexMinPQ extends IndexMinPQ {\r\n\r\n    constructor(n, heuristic, end, board) {\r\n        super(n);\r\n        this.heuristic = heuristic;\r\n        this.end = end;\r\n        this.board = board;\r\n    }\r\n\r\n    greater = (a, b) => {\r\n        const { end, board, heuristic, pq, keys } = this;\r\n        const pqA = pq[Math.floor(a)];\r\n        const pqB = pq[Math.floor(b)];\r\n\r\n        return ( keys[pqA] + heuristic(pqA, end, board) ) > \r\n                ( keys[pqB] + heuristic(pqB, end, board) );\r\n    }\r\n\r\n}","import Dijkstra from \"./Dijkstra\";\r\nimport AStarIndexMinPQ from \"../datastructures/AStarIndexMinPQ\"\r\n\r\nexport default class AStar extends Dijkstra {\r\n    \r\n    constructor(graph, n, start, end, board, heuristic) {\r\n        super(graph, n, start, end, board);\r\n        this.pq = new AStarIndexMinPQ(n, heuristic, end, board);\r\n    }\r\n}","import AStar from './AStar';\r\nimport Dijkstra from './Dijkstra';\r\nimport { shortestPaths, heuristics } from '../constants';\r\nimport  { eucledianHeuristic, manhattenHeuristic } from \"./operations\"\r\n\r\n// this.g, rows * columns, fields.start, fields.end, board\r\nexport const algorithms = {\r\n    [shortestPaths.ASTAR]: { class: AStar, args: [] },\r\n    [shortestPaths.DIJKSTRA]: { class: Dijkstra, args: [] }\r\n}\r\n\r\nexport const heuristic = {\r\n    [heuristics.EUCLIDEAN]: eucledianHeuristic,\r\n    [heuristics.MANHATTAN]: manhattenHeuristic\r\n}\r\n\r\nexport const instantiate = className => \r\n    new algorithms[className].class(...algorithms[className].args);\r\n\r\n","import React, { Component } from 'react'\r\nimport { states, rows, columns, colors, styles, shortestPaths, heuristics, options } from '../constants';\r\nimport GraphBuilder from \"./GraphBuilder\";\r\nimport { mapIndexToSquare, mapSquareToIndex } from '../algorithms/operations';\r\nimport AppBar from './AppBar';\r\nimport { instantiate, algorithms, heuristic } from '../algorithms/Factory';\r\n\r\nexport default class Border extends Component  {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            board: [],\r\n            delay: 1,    // Unit is in ms.\r\n            algorithm: shortestPaths.ASTAR,\r\n            option: options.SET_START,\r\n            start: 1,\r\n            end: 2,\r\n            heuristicName: heuristics.MANHATTAN,\r\n            relaxedEdges: 0\r\n        }\r\n        this.algoIsOn = false;\r\n        this.bindMethods();\r\n    }\r\n\r\n    setHeuristic = e => this.setState({ heuristicName: e.target.value })\r\n\r\n    bindMethods() {\r\n        this.onDelayChange = this.onDelayChange.bind(this);\r\n        this.startAlgorithm = this.startAlgorithm.bind(this);\r\n        this.setOption = this.setOption.bind(this);\r\n        this.handleSquareClick = this.handleSquareClick.bind(this);\r\n        this.initBoard = this.initBoard.bind(this);\r\n        this.setHeuristic = this.setHeuristic.bind(this);\r\n        this.incrementRelaxEdges = this.incrementRelaxEdges.bind(this);\r\n        this.resetRelaxEdges = this.resetRelaxEdges.bind(this);\r\n    }\r\n\r\n    setAlgorithmsParams() {\r\n        const { start, end, board, heuristicName } = this.state;\r\n        algorithms[shortestPaths.DIJKSTRA].args = [this.g, rows * columns, start, end, board];\r\n        algorithms[shortestPaths.ASTAR].args = [this.g, rows * columns, start, end, board, heuristic[heuristicName]];\r\n    }\r\n\r\n    setOption = e => this.setState({ option: e.target.value }); \r\n\r\n    setAlgorithm = e => this.setState({ algorithm: e.target.value });\r\n\r\n    setAlgoIsOn = isOn => {\r\n        const { board } = this.state;\r\n        this.algoIsOn = isOn;\r\n        this.setState({ board });\r\n    }\r\n\r\n    handleSquareClick = (e, square) => {\r\n        switch(this.state.option) {\r\n            case options.SET_START:\r\n                this.setStart(mapSquareToIndex(square))\r\n                break;\r\n            case options.SET_END:\r\n                this.setEnd(mapSquareToIndex(square))\r\n                break;\r\n            case options.SET_WALL:\r\n                this.onSetWall(square);\r\n                break;\r\n            case options.SET_UNDISCOVERED:\r\n                this.onSetUndiscovered(square);\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    handleSquareHover = (e, square) => {\r\n        if (e.buttons !== 1) return;\r\n        switch(this.state.option) {\r\n            case options.SET_WALL:\r\n                this.onSetWall(square);\r\n                break;\r\n            case options.SET_UNDISCOVERED:\r\n                this.onSetUndiscovered(square);\r\n                break;\r\n        }\r\n    }\r\n\r\n    onSetUndiscovered = square => {\r\n        const { option, board } = this.state;\r\n        if (this.algoIsOn || option !== options.SET_UNDISCOVERED || \r\n            square.state === states.START || square.state === states.END) return;\r\n        square.state = states.UNDISCOVERED;\r\n        this.setState({ board });\r\n    }\r\n\r\n    onSetWall = square => {\r\n        const { option, board } = this.state;\r\n        if (this.algoIsOn || option !== options.SET_WALL ||\r\n            square.state === states.START || square.state === states.END) return;\r\n        square.state = states.WALL;\r\n        this.setState({ board });\r\n    }\r\n\r\n    createArea(row, column) {\r\n        return {\r\n            row,\r\n            column,\r\n            state: states.UNDISCOVERED\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initBoard();\r\n        this.setStart(5);\r\n        this.setEnd(100);\r\n    }\r\n\r\n    initBoard() {\r\n        let { start, end, board } = this.state;\r\n        this.resetRelaxEdges();\r\n\r\n        for(let row = 0; row < rows; row++) {\r\n            board[row] = [];\r\n            for(let column = 0; column < columns; column++) \r\n                board[row][column] = this.createArea(row, column);\r\n        }\r\n\r\n        if (!start) start = 0;\r\n        if(!end) end = 1;\r\n        this.setStart(start);\r\n        this.setEnd(end);\r\n        this.setState({ board });\r\n    }\r\n\r\n    onAlgoIsOn = isOn => this.algoIsOn = isOn;\r\n\r\n    onDelayChange = delay => this.setState({ delay });\r\n\r\n    createColumn(row) {\r\n        const { board } = this.state;\r\n        const columns = [];\r\n\r\n        board[row].forEach(square => {\r\n\r\n            columns.push(\r\n                <td\r\n                    key={`${row}_${square.column}`}\r\n                    className={styles[square.state]}\r\n                    style={{\r\n                        backgroundColor: colors[square.state],\r\n                    }}\r\n                    onClick={e => this.handleSquareClick(e, square)}\r\n                    onMouseOver={e => this.handleSquareHover(e, square)}\r\n                >\r\n                </td>\r\n                )\r\n        });\r\n\r\n        return columns;\r\n    }\r\n\r\n    async setVisited(index, state) {\r\n        if (!this.algoIsOn) return;\r\n        const { board, delay } = this.state;\r\n        const square = mapIndexToSquare(index, board, columns, rows);\r\n        square.state = state;\r\n        return new Promise(resolve =>\r\n            setTimeout(() => {\r\n                this.setState({ board }, () => {\r\n                    resolve();\r\n                });\r\n            }, delay)\r\n        );\r\n    }\r\n\r\n    createRows() {\r\n        const { board } = this.state;\r\n        const grid = [];\r\n        board.forEach( (row, i) => { grid[i] = \r\n            <tr key={i}>\r\n                {this.createColumn(i)}\r\n            </tr>\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    createAlgorithm = () => {\r\n        this.setAlgorithmsParams();\r\n        this.algo = instantiate(this.state.algorithm);\r\n        this.algo.setBoard(this);\r\n    }\r\n\r\n    clearSquare(square) {\r\n        if (square.state === states.DISCOVERED ||square.state === states.PATH)\r\n            square.state = states.UNDISCOVERED;\r\n    }\r\n    \r\n    clearBoard() {\r\n        const { board } = this.state;\r\n        board.forEach(row => {\r\n            row.forEach(column => {\r\n                this.clearSquare(column);\r\n            })\r\n        });\r\n        this.setState({ board });\r\n    }\r\n    \r\n    incrementRelaxEdges = () => this.setState({ relaxedEdges: this.state.relaxedEdges + 1 });\r\n\r\n    resetRelaxEdges = () => this.setState({ relaxedEdges: 0 });\r\n\r\n    startAlgorithm() {\r\n        const { board, start, end } = this.state;\r\n        if (!start || !end || start === end) return;\r\n        this.clearBoard();\r\n        this.algoIsOn = true;\r\n        this.g = this.graphBuilder = new GraphBuilder(board, rows, columns).build();\r\n        this.createAlgorithm();\r\n        this.algo.invoke();\r\n        this.algo = null;\r\n        this.g = null;\r\n    }\r\n\r\n    validatePositionSet(position) {\r\n        const square = mapIndexToSquare(position, this.state.board)\r\n        if (square.state === states.START || square.state === states.END) return false;\r\n        return true;\r\n    }\r\n\r\n    setStart(s) {\r\n        const { board, start } = this.state;\r\n        if (!this.validatePositionSet(s)) return;\r\n        const newStart = mapIndexToSquare(s, board);\r\n        if(typeof start === \"number\") mapIndexToSquare(start, board).state = states.UNDISCOVERED;\r\n        newStart.state = states.START;\r\n        this.setState({ board, start: s });\r\n    }\r\n\r\n    setEnd(e) {\r\n        const { board, end } = this.state;\r\n        if(!this.validatePositionSet(e)) return;\r\n        const newEnd = mapIndexToSquare(e, board);\r\n        if (typeof end === \"number\") mapIndexToSquare(end, board).state = states.UNDISCOVERED;\r\n        newEnd.state = states.END;\r\n        this.setState({ board, end: e });\r\n    }\r\n\r\n    render() {\r\n        const { delay, algorithm, heuristicName, relaxedEdges, option } = this.state;\r\n        return <React.Fragment>\r\n            <AppBar\r\n                setAlgorithm={this.setAlgorithm}\r\n                algorithm={algorithm}\r\n                startAlgorithm={this.startAlgorithm}\r\n                onDelayChange={this.onDelayChange}\r\n                delay={delay}\r\n                setOption={this.setOption}\r\n                option={option}\r\n                clearBoard={this.initBoard}\r\n                onAlgoIsOn={this.onAlgoIsOn}\r\n                setHeuristic={this.setHeuristic}\r\n                heuristicName={heuristicName}\r\n                relaxedEdges={relaxedEdges}\r\n                algoIsOn={this.algoIsOn}\r\n            />\r\n        \r\n        <table\r\n            style={{\r\n               width: '100%',\r\n                height: '500px'\r\n            }}>\r\n            <tbody>\r\n                {this.createRows()}\r\n            </tbody>\r\n        </table>\r\n\r\n        </React.Fragment>\r\n        \r\n        \r\n    }\r\n}\r\n","import React from 'react';\r\nimport Border from './ui/Border';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <Border />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}